/* 
 * Marketo Rest API
 *
 * Marketo Rest API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developerfeedback@marketo.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SFA.DAS.Experiments.Models.Marketo;

namespace Marketo.Api.Client.Model
{
    /// <summary>
    /// SyncLeadRequest
    /// </summary>
    [DataContract]
    public partial class SyncLeadRequest :  IEquatable<SyncLeadRequest>, IValidatableObject
    {
        /// <summary>
        /// Type of sync operation to perform.  Defaults to createOrUpdate if unset
        /// </summary>
        /// <value>Type of sync operation to perform.  Defaults to createOrUpdate if unset</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum CreateOnly for value: createOnly
            /// </summary>
            [EnumMember(Value = "createOnly")]
            CreateOnly = 1,

            /// <summary>
            /// Enum UpdateOnly for value: updateOnly
            /// </summary>
            [EnumMember(Value = "updateOnly")]
            UpdateOnly = 2,

            /// <summary>
            /// Enum CreateOrUpdate for value: createOrUpdate
            /// </summary>
            [EnumMember(Value = "createOrUpdate")]
            CreateOrUpdate = 3,

            /// <summary>
            /// Enum CreateDuplicate for value: createDuplicate
            /// </summary>
            [EnumMember(Value = "createDuplicate")]
            CreateDuplicate = 4

        }

        /// <summary>
        /// Type of sync operation to perform.  Defaults to createOrUpdate if unset
        /// </summary>
        /// <value>Type of sync operation to perform.  Defaults to createOrUpdate if unset</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncLeadRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SyncLeadRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncLeadRequest" /> class.
        /// </summary>
        /// <param name="action">Type of sync operation to perform.  Defaults to createOrUpdate if unset.</param>
        /// <param name="asyncProcessing">If set to true, the call will return immediately.</param>
        /// <param name="input">List of leads for input (required).</param>
        /// <param name="lookupField">Field to deduplicate on.  The field must be present in each lead record of the input.  Defaults to email if unset.</param>
        /// <param name="partitionName">Name of the partition to operate on, if applicable.  Should be set whenever possible, when interacting with an instance where partitions are enabled..</param>
        public SyncLeadRequest(ActionEnum? action = default(ActionEnum?), bool asyncProcessing = default(bool), List<Lead> input = default(List<Lead>), string lookupField = default(string), string partitionName = default(string))
        {
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new InvalidDataException("input is a required property for SyncLeadRequest and cannot be null");
            }
            else
            {
                this.Input = input;
            }

            this.Action = action;
            this.AsyncProcessing = asyncProcessing;
            this.LookupField = lookupField;
            this.PartitionName = partitionName;
        }
        
        /// <summary>
        /// If set to true, the call will return immediately
        /// </summary>
        /// <value>If set to true, the call will return immediately</value>
        [DataMember(Name="asyncProcessing", EmitDefaultValue=false)]
        public bool AsyncProcessing { get; set; }

        /// <summary>
        /// List of leads for input
        /// </summary>
        /// <value>List of leads for input</value>
        [DataMember(Name="input", EmitDefaultValue=false)]
        public List<Lead> Input { get; set; }

        /// <summary>
        /// Field to deduplicate on.  The field must be present in each lead record of the input.  Defaults to email if unset
        /// </summary>
        /// <value>Field to deduplicate on.  The field must be present in each lead record of the input.  Defaults to email if unset</value>
        [DataMember(Name="lookupField", EmitDefaultValue=false)]
        public string LookupField { get; set; }

        /// <summary>
        /// Name of the partition to operate on, if applicable.  Should be set whenever possible, when interacting with an instance where partitions are enabled.
        /// </summary>
        /// <value>Name of the partition to operate on, if applicable.  Should be set whenever possible, when interacting with an instance where partitions are enabled.</value>
        [DataMember(Name="partitionName", EmitDefaultValue=false)]
        public string PartitionName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyncLeadRequest {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  AsyncProcessing: ").Append(AsyncProcessing).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  LookupField: ").Append(LookupField).Append("\n");
            sb.Append("  PartitionName: ").Append(PartitionName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SyncLeadRequest);
        }

        /// <summary>
        /// Returns true if SyncLeadRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SyncLeadRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyncLeadRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.AsyncProcessing == input.AsyncProcessing ||
                    this.AsyncProcessing.Equals(input.AsyncProcessing)
                ) && 
                (
                    this.Input == input.Input ||
                    this.Input != null &&
                    input.Input != null &&
                    this.Input.SequenceEqual(input.Input)
                ) && 
                (
                    this.LookupField == input.LookupField ||
                    (this.LookupField != null &&
                    this.LookupField.Equals(input.LookupField))
                ) && 
                (
                    this.PartitionName == input.PartitionName ||
                    (this.PartitionName != null &&
                    this.PartitionName.Equals(input.PartitionName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Action.GetHashCode();
                hashCode = hashCode * 59 + this.AsyncProcessing.GetHashCode();
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.LookupField != null)
                    hashCode = hashCode * 59 + this.LookupField.GetHashCode();
                if (this.PartitionName != null)
                    hashCode = hashCode * 59 + this.PartitionName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
